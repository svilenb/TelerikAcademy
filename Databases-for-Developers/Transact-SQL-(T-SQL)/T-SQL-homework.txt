1. Create a database with two tables: Persons(Id(PK), FirstName, LastName, SSN) and Accounts(Id(PK), PersonId(FK), Balance). Insert few records for testing. Write a stored procedure that selects the full names of all persons.

===========================================================

CREATE PROC usp_SelectPeopleFullName
AS
	SELECT FirstName + ' ' + LastName AS [Full Name]
	FROM People
GO

EXEC usp_SelectPeopleFullName

===========================================================

2. Create a stored procedure that accepts a number as a parameter and returns all persons who have more money in their accounts than the supplied number.

===========================================================

CREATE PROC usp_SelectPeopleByBalance(
	@minBalance int = 4000)
AS
	SELECT p.FirstName, p.LastName, a.Balance
	FROM People p
		INNER JOIN Accounts a
			ON p.PersonID = a.PersonID
	WHERE a.Balance >= @minBalance
GO

EXEC usp_SelectPeopleByBalance 6000

===========================================================

3. Create a function that accepts as parameters – sum, yearly interest rate and number of months. It should calculate and return the new sum. Write a SELECT to test whether the function works as expected.

===========================================================

CREATE FUNCTION ufn_CalcNewSum(@sum money, @interestRate int, @numberOfMonths int)
	RETURNS money
AS
BEGIN
	RETURN (@interestRate) * @numberOfMonths * @sum / 1200 + @sum
END
GO

SELECT dbo.ufn_CalcNewSum(3700, 10, 24) AS [New Sum]

===========================================================

4. Create a stored procedure that uses the function from the previous example to give an interest to a person's account for one month. It should take the AccountId and the interest rate as parameters.

===========================================================

USE [BankSystem]
GO

CREATE PROC dbo.usp_GiveInterest
	@accountID int = 1,
	@interestRate int = 10
AS
	UPDATE Accounts SET Balance = dbo.ufn_CalcNewSum(Balance, @interestRate, 1)
	WHERE AccountID = @accountID
GO

EXEC usp_GiveInterest 1, 10

===========================================================

5. Add two more stored procedures WithdrawMoney( AccountId, money) and DepositMoney (AccountId, money) that operate in transactions.

===========================================================

CREATE PROC usp_WithdrawMoney (@accountID INT, @money money)
AS
BEGIN TRAN
	UPDATE Accounts
	SET Balance = Balance - @money
	WHERE AccountID = @accountID
COMMIT TRAN
GO

EXEC usp_WithdrawMoney 2, 10
GO

CREATE PROC usp_DepositMoney (@accountID INT, @money money)
AS
BEGIN TRAN
	UPDATE Accounts
	SET Balance = Balance + @money
	WHERE AccountID = @accountID
COMMIT TRAN
GO

EXEC usp_DepositMoney 2, 200
GO

===========================================================

6. Create another table – Logs(LogID, AccountID, OldSum, NewSum). Add a trigger to the Accounts table that enters a new entry into the Logs table every time the sum on an account changes.

===========================================================

CREATE TRIGGER tr_AccountsUpdate ON Accounts FOR UPDATE
AS			
	INSERT INTO Logs (OldSum, NewSum, AccountID)
	SELECT d.Balance, i.Balance, d.AccountID
  FROM deleted AS d
  JOIN inserted AS i
    ON d.AccountID = i.AccountID 
Go

EXEC dbo.usp_DepositMoney 1, 300
GO

===========================================================

7. Define a function in the database TelerikAcademy that returns all Employee's names (first or middle or last name) and all town's names that are comprised of given set of letters. Example 'oistmiahf' will return 'Sofia', 'Smith', … but not 'Rob' and 'Guy'.

===========================================================

USE [TelerikAcademy]
GO

CREATE FUNCTION ufn_IsComprisedOfLetters (@word nvarchar(20), @letters nvarchar(20))
RETURNS BIT
AS
BEGIN
	DECLARE @lettersLen int = LEN(@letters),
	@matches int = 0,
	@currentChar nvarchar(1)

	WHILE(@lettersLen > 0)
	BEGIN
		SET @currentChar = SUBSTRING(@letters, @lettersLen, 1)
		IF(CHARINDEX(@currentChar, @word, 0) > 0)
			BEGIN
				SET @matches += 1
				SET @lettersLen -= 1
			END
		ELSE
			SET @lettersLen -= 1
	END

	IF(@matches >= LEN(@word) OR @matches >= LEN(@letters))
		RETURN 1

	RETURN 0
END
GO

CREATE FUNCTION ufn_FilterEmployeesAndTowns (@letters nvarchar(20))
RETURNS @ResultTable TABLE (Name varchar(50) NOT NULL)
AS
BEGIN
	INSERT INTO @ResultTable
	SELECT LastName FROM Employees

	INSERT INTO @ResultTable
	SELECT FirstName FROM Employees

	INSERT INTO @ResultTable
	SELECT t.Name FROM Towns t

	DELETE FROM @ResultTable 
	WHERE dbo.ufn_IsComprisedOfLetters(Name, @letters) = 0
RETURN
END
GO

SELECT * FROM dbo.ufn_FilterEmployeesAndTowns('oistmiahf')

===========================================================

8. Using database cursor write a T-SQL script that scans all employees and their addresses and prints all pairs of employees that live in the same town.

===========================================================

DECLARE empCursor CURSOR READ_ONLY FOR
	SELECT l.FirstName, l.LastName, t.Name,
		r.FirstName, r.LastName
	FROM Employees l
		INNER JOIN Addresses a
			ON a.AddressID = l.AddressID
		INNER JOIN Towns t
			ON t.TownID = a.TownID,
		Employees r
		INNER JOIN Addresses a1
			ON a1.AddressID = r.AddressID
		INNER JOIN Towns t1
			ON t1.TownID = a1.TownID

OPEN empCursor
DECLARE @lFirstName NVARCHAR(50),
	@lLastName NVARCHAR(50),
	@town NVARCHAR(50),
	@rFirstName NVARCHAR(50),
	@rLastName NVARCHAR(50)

FETCH NEXT FROM empCursor
INTO @lFirstName, @lLastName, @town, @rFirstName, @rLastName

WHILE @@FETCH_STATUS = 0
	BEGIN
		PRINT @lFirstName + ' ' + @lLastName +
				'------' + @town + '------' + @rFirstName + ' ' + @rLastName
		FETCH NEXT FROM empCursor
		INTO @lFirstName, @lLastName, @town, @rFirstName, @rLastName
	END

CLOSE empCursor
DEALLOCATE empCursor

===========================================================

9. * Write a T-SQL script that shows for each town a list of all employees that live in it. 

===========================================================

USE [TelerikAcademy]
GO

DECLARE townCursor CURSOR READ_ONLY FOR
SELECT Name FROM Towns
OPEN townCursor
DECLARE @town VARCHAR(50), @employeesList VARCHAR(MAX)
FETCH NEXT FROm townCursor INTO @town

WHILE @@FETCH_STATUS = 0
	BEGIN
		BEGIN
			DECLARE nameCursor CURSOR READ_ONLY FOR
			SELECT e.FirstName, e.LastName
			FROM Employees e
				INNER JOIN Addresses a
					ON e.AddressID = a.AddressID
				INNER JOIn Towns t
					ON a.TownID = t.TownID
			WHERE t.Name = @town
			OPEN nameCursor
			DECLARE @firstName VARCHAR(50), @lastName VARCHAR(50)
			FETCH NEXT FROM nameCursor INTO @firstName,  @lastName
			WHILE @@FETCH_STATUS = 0
				BEGIN
					SET @employeesList = CONCAT(@employeesList, @firstName, ' ', @lastName, ', ')
					FETCH NEXT FROM nameCursor
					INTO @firstName,  @lastName
				END

			CLOSE nameCursor
			DEALLOCATE nameCursor
		END

		 SET @employeesList = LEFT(@employeesList, LEN(@employeesList) - 1)
		 PRINT @town + ' -> ' + @employeesList
		 FETCH NEXT FROM townCursor INTO @town
	END

CLOSE townCursor
DEALLOCATE townCursor

===========================================================

10. Define a .NET aggregate function StrConcat that takes as input a sequence of strings and return a single string that consists of the input strings separated by ','. 

===========================================================

IF OBJECT_ID('dbo.concat') IS NOT NULL DROP Aggregate concat 
GO 

IF EXISTS (SELECT * FROM sys.assemblies WHERE name = 'concat_assembly') 
       DROP assembly concat_assembly; 
GO      

CREATE Assembly concat_assembly 
   AUTHORIZATION dbo 
   FROM 'E:\trash\SQLibrary\SQLibrary\bin\Debug\SQLibrary.dll' 
   WITH PERMISSION_SET = SAFE; 
GO 

CREATE AGGREGATE dbo.concat (@Value NVARCHAR(MAX), @Delimiter NVARCHAR(4000))
RETURNS NVARCHAR(MAX) 
EXTERNAL Name concat_assembly.concat; 
GO  

sp_configure 'clr enabled', 1
GO
RECONFIGURE
GO

SELECT dbo.concat(FirstName + ' ' + LastName, ', ')
   FROM Employees
GO

===========================================================